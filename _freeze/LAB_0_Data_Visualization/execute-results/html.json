{
  "hash": "5037867695d42dd75cfda99a38a07411",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"데이터 시각화\"\nauthor: \"이상일, 전혜민, 김세창, 김우형\"\ndate: last-modified\nnumber-sections: true\nformat: \n  html: \n    toc: true\n    embed-resources: true\n    fig-align: center\ncode-link: true\ncode-copy: true\nexecute: \n  warning: true\n  error: true\n  freeze: auto\neditor: visual\n---\n\n::: {.cell}\n\n:::\n\n\n# `ggplot2` 패키지\n\n`ggplot2` 패키지는 R에서 시각화를 위해 가장 널리 사용되는 패키지 중 하나로, 그래픽 문법(Grammar of Graphics)을 바탕으로 유연하고 직관적인 그래프 생성을 가능하게 한다. 심미성 요소(aesthetics)와 기하적 요소(geometry)를 명확히 분리하고, 각 요소를 레이어(layer) 형태로 구성해 `+`로 연결함으로써 복잡한 시각화를 논리적으로 표현할 수 있다.\n\n![출처: https://r.qcbs.ca/workshop03/book-en/grammar-of-graphics-gg-basics.html](images/clipboard-2961085861.png)\n\n각 레이어에 대한 설명은 다음과 같다.\n\n| 구성요소 | 설명 |\n|----|----|\n| 데이터(Data) | 시각화할 원데이터 |\n| 심미성(Aesthetics) | 변수와 시각적 속성 간의 연결(x, y, color, size 등) |\n| 기하(Geometries) | 실제 그래프 형태 |\n| 면 분할(Facets) | 데이터를 하위 집합으로 나누어 여러 개의 소형 그래프로 표현 |\n| 통계 변환(statistics) | 데이터에 대한 요약 또는 변환 |\n| 좌표계(Coordinates) | 그래프의 좌표체계를 설정 |\n| 테마(Theme) | 배경, 폰트, 제목, 축 등 비데이터적 시각 요소 |\n\n# 핵심 레이어: 심미성과 기하\n\n7개의 구성요소 중 가장 중요한 것은 `심미성(aesthetics)` 혹은 `심미성 매핑(aesthetic mapping)`과 `기하(geometries)` 혹은 `기하 객체(geometric objects)` 이다. 심미성은 전체적인 시각적 속성을 결정하고 기하는 그래프의 유형을 결정한다. 두 가지는 독립적인 요소이지만 어느 정도 관련되며, 특정 기하는 특정 심미성과만 결합할 수 있기도 하다. 예를 들어 포인트 기하 객체(`geom_point()`)는 크기(`size`) 심미성과 관련되지만, 라인폭(`linewidth`) 심미성과는 관련이 없다.\n\n## 기초 예제\n\n기초 예제에서 다룰 데이터는 `iris` 데이터이다. 그려볼 그래프는 꽃잎의 길이와 너비 사이의 관계를 보여줄 수 있는 산점도를 그려보고자 한다. 이 때 종별로 심미성 요소를 다르게 부여하여 시각적으로 구분하고자 한다.\n\niris 데이터를 불러와 확인해보자. 꽃잎의 길이는 `Petal.Length`, 꽃잎의 너비는 `Petal.Width`, 종에 대한 정보는 `Species`에 나타나있다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(iris)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa\n```\n\n\n:::\n:::\n\n\nggplot2 패키지는 tidyverse 패키지 내에 속해 있다. tidyverse 패키지를 로드하자.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n:::\n\n\n먼저 그래프를 그릴 데이터를 추가한다.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = iris)\n```\n\n::: {.cell-output-display}\n![](LAB_0_Data_Visualization_files/figure-html/unnamed-chunk-4-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n데이터만 추가했을 때는 x축과 y축에 어떤 변수가 들어갈지 정해지지 않아서 빈 화면만 출력되는 것을 볼 수 있다. 이제 x축과 y축을 지정해보자. x축과 y축 지정은 심미성 매핑에 해당하므로 `aes()` 함수 안에서 지정한다. 꾳잎의 길이와 꽃잎의 너비의 관계를 보고 싶으므로 x축에 꾳잎의 길이, y축에 꽃잎의 너비를 지정해보자.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = iris, aes(x = Petal.Length, y = Petal.Width))\n```\n\n::: {.cell-output-display}\n![](LAB_0_Data_Visualization_files/figure-html/unnamed-chunk-5-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n아직 기하 객체가 없기 때문에 그래프가 나타나지 않는다. `geom_point()`를 사용하여 점 객체를 그려 산점도를 완성해보자.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = iris, aes(x = Petal.Length, y = Petal.Width)) + \n    geom_point()\n```\n\n::: {.cell-output-display}\n![](LAB_0_Data_Visualization_files/figure-html/unnamed-chunk-6-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n드디어 산점도가 그려졌다. 하지만 우리가 원하는 최종적인 그래프는 그래프 내에서 종이 시각적으로 구분되는 것이다. 이를 위해서는 추가적인 심미성 매핑이 필요하다.\n\n## 심미성 매핑\n\n심미성 매핑(aesthetic mapping)은 데이터의 변수를 시각적 속성에 연결하는 과정을 의미하며, 앞서 보았듯이 `aes()` 함수 안에서 지정된다. x축과 y축을 지정하거나, 변수에 따라서 색상, 크기, 투명도 등을 다르게 부여하는 것이 대표적인 심미성 매핑의 예시이다. 앞서 그린 그래프를 종에 따라서 점 색상이 다르게 나타나도록 해보자. `color` 속성을 이용하면 된다.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# 심미성: 색상\nggplot(data = iris, aes(x = Petal.Length, y = Petal.Width, color = Species)) +\n    geom_point()\n```\n\n::: {.cell-output-display}\n![](LAB_0_Data_Visualization_files/figure-html/unnamed-chunk-7-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n점의 형태나 크기, 투명도도 종에 따라 다르게 부여할 수 있다.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# 심미성: 형태\nggplot(data = iris, aes(x = Petal.Length, y = Petal.Width, shape = Species)) +\n    geom_point()\n```\n\n::: {.cell-output-display}\n![](LAB_0_Data_Visualization_files/figure-html/unnamed-chunk-8-1.png){fig-align='center' width=672}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# 심미성: 크기\nggplot(data = iris, aes(x = Petal.Length, y = Petal.Width, size = Species)) +\n    geom_point()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Using size for a discrete variable is not advised.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](LAB_0_Data_Visualization_files/figure-html/unnamed-chunk-9-1.png){fig-align='center' width=672}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# 심미성: 투명도\nggplot(data = iris, aes(x = Petal.Length, y = Petal.Width, alpha = Species)) +\n    geom_point()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Using alpha for a discrete variable is not advised.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](LAB_0_Data_Visualization_files/figure-html/unnamed-chunk-10-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n심미성 요소는 `ggplot()` 내에서 글로벌하게 적용할 수도 있고, 기하 객체별로 로컬하게 적용할 수도 있다. 위에서 그린 산점도를 보면 꽃잎 길이와 너비 사이의 정적(positive) 관계를 확인할 수 있는데, 이를 표현하는 추세선을 그리고자 한다. 이때 `color` 심미성 요소를 글로벌하게 적용하느냐, 로컬하게 적용하느냐에 따라 다른 결과를 얻게 된다. 추세선은 `geom_smooth()`를 이용하여 그릴 수 있으며, 하나의 그래프에 복수의 기하 객체를 담고 싶다면 `+`로 연결해주면 된다.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# 글로벌하게 적용\nggplot(data = iris, aes(x = Petal.Length, y = Petal.Width, color = Species)) +\n    geom_point() +\n    geom_smooth()\n```\n\n::: {.cell-output-display}\n![](LAB_0_Data_Visualization_files/figure-html/unnamed-chunk-11-1.png){fig-align='center' width=672}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# 로컬하게 적용\nggplot(data = iris, aes(x = Petal.Length, y = Petal.Width)) +\n    geom_point(aes(color = Species)) +\n    geom_smooth()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](LAB_0_Data_Visualization_files/figure-html/unnamed-chunk-12-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n## 기하 객체\n\n기하 객체(geometric objects)는 데이터가 시각적으로 표현되는 구체적인 형태를 의미하는데, `ggplot2` 패키지에서는 `geom_`으로 시작하는 함수로 나타낸다. 점, 선, 막대, 히스토그램, 박스플롯 등 다양한 기하 객체가 존재하며 사용자가 그리고자 하는 그래프 유형에 따라 적절하게 선택할 수 있다. 위에서 사용한 `geom_point()`도 점을 표현하는 기하 객체이다.\n\n`geom_line()`을 사용하면 선을 표현할 수 있다. 관측 순서에 따른 꽃잎 길이에 대한 꺾은선 그래프를 그려보자.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = iris, aes(x = 1:150, y = Petal.Length, color = Species)) + \n    geom_line() +\n    labs(\n        x = \"Observed Index\",\n        y = \"Length of Petal\"\n    )\n```\n\n::: {.cell-output-display}\n![](LAB_0_Data_Visualization_files/figure-html/unnamed-chunk-13-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n`geom_bar()`와 `geom_col()`은 막대 그래프를 그린다. 여기서는 `geom_col()`를 사용해 종별 평균 꽃잎 길이를 나타내는 그래프를 그려보자.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# 종별 평균 꽃잎 길이 구하기\niris_avg <- iris |> \n    group_by(Species) |> \n    summarise(avg_Petal_Length = mean(Petal.Length))\n\n# 종별 평균 꽃잎 길이 \nggplot(data = iris_avg, aes(x = Species, y = avg_Petal_Length)) +\n    geom_col()\n```\n\n::: {.cell-output-display}\n![](LAB_0_Data_Visualization_files/figure-html/unnamed-chunk-14-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n`geom_histogram()`는 히스토그램을 그린다. 꽃잎 길이에 대한 히스토그램을 그려보자. `binwidth` 옵션은 히스토그램의 구간을 설정한다.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = iris, aes(x = Petal.Length)) + \n    geom_histogram(binwidth = 0.1)\n```\n\n::: {.cell-output-display}\n![](LAB_0_Data_Visualization_files/figure-html/unnamed-chunk-15-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n`geom_boxplot()`은 박스플롯을 그린다. 종별 꽃잎 길이에 대한 박스플롯을 그려보자. 종의 구분은 색상으로 한다.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = iris, aes(x = Petal.Length, color = Species)) +\n    geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](LAB_0_Data_Visualization_files/figure-html/unnamed-chunk-16-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n# 추가 레이어\n\n## 스케일\n\n스케일(scale)은 심미성을 세부적으로 조정하는 역할을 하며, `scale_<aesthetic>_<type>()` 형태로 사용된다.\n\n-   `<aesthetic>` : `x`, `y`, `color`, `fill`, `size`, `shape` 등\n\n-   `<type>` : `continuous`, `discrete`, `manual`, `gradient`, `log10`, 등\n\n앞서 그린 꽃잎의 길이와 너비에 대한 산점도를 다시 살펴보자.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = iris, aes(x = Petal.Length, y = Petal.Width, color = Species)) +\n    geom_point()\n```\n\n::: {.cell-output-display}\n![](LAB_0_Data_Visualization_files/figure-html/unnamed-chunk-17-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n이는 아래 코드처럼 `ggplot2`가 자동으로 적용한 세 가지 스케일 설정에 의거해 만들어진 것이다.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = iris, aes(x = Petal.Length, y = Petal.Width, color = Species)) +\n    geom_point() +\n    scale_x_continuous() +\n    scale_y_continuous() +\n    scale_color_discrete()\n```\n\n::: {.cell-output-display}\n![](LAB_0_Data_Visualization_files/figure-html/unnamed-chunk-18-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n스케일 함수의 아규먼트를 수정하면 보다 세밀한 심미성 조정이 가능하다.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = iris, aes(x = Petal.Length, y = Petal.Width, color = Species)) +\n    geom_point() +\n    scale_x_continuous(labels = NULL) +  # x축 표시하지 않음\n    scale_y_continuous(breaks = seq(0, 3, by = 1)) + # y축 구간 설정\n    scale_color_brewer(palette = \"Set2\") # 컬러 팔레트 설정\n```\n\n::: {.cell-output-display}\n![](LAB_0_Data_Visualization_files/figure-html/unnamed-chunk-19-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n::: callout-note\n## ColorBrewer\n\n`scale_color_brewer()` 함수는 [ColorBrewer](https://colorbrewer2.org/#type=sequential&scheme=BuGn&n=3) 컬러 스케일을 사용한 것인데 익히고 있으면 많은 도움이 된다. 살펴보면 양적인 변수에 적용하기 좋은 팔레트가 있고, 질적인 변수에 적용하기 좋은 팔레트도 있다. 마음에 드는 팔레트를 골라 그래프의 색상 팔레트를 바꿔보자.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](LAB_0_Data_Visualization_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n:::\n\n::: callout-tip\n## 직접 색상 지정하기\n\n내가 원하는 색상을 골라 직접 지정하는 방법도 있다. `scale_color_brewer()` 대신 `scale_color_manual()` 함수를 사용하면 된다. 또한 RGB 색상에 대한 html 코드를 사용해도 되고, R에서 부여한 657개의 이름 중에서 골라 사용해도 된다. 색상 이름 및 html 코드는 [다음 사이트](https://www.stat.auckland.ac.nz/~ihaka/courses/787/R-colours-a4.pdf)를 참고하라.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = iris, aes(x = Petal.Length, y = Petal.Width, color = Species)) +\n    geom_point() +\n    scale_x_continuous(labels = NULL) +  \n    scale_y_continuous(breaks = seq(0, 3, by = 1)) + \n    scale_color_manual(\n        values = c(\n            \"setosa\" = \"Tomato\",\n            \"versicolor\" = \"#3498DB\",\n            \"virginica\" = \"#F1C40F\"\n            ) # 컬러 팔레트 직접 설정\n        )\n```\n\n::: {.cell-output-display}\n![](LAB_0_Data_Visualization_files/figure-html/unnamed-chunk-21-1.png){fig-align='center' width=672}\n:::\n:::\n\n:::\n\n## 좌표\n\n좌표(coordinates) 레이어 혹은 좌표계(coordinate systems)는 그래픽 요소들의 위치 결정에 기준이 되는 준거체계이다. `coord_flip()` 함수가 대표적이다.\n\n`coord_flip()`은 축을 전환한다. 종별 꽃잎 길이에 대한 박스플롯의 축을 바꿔 보다 보기 편하게 그려보자.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = iris, aes(x = Petal.Length, color = Species)) +\n    geom_boxplot() +\n    coord_flip()\n```\n\n::: {.cell-output-display}\n![](LAB_0_Data_Visualization_files/figure-html/unnamed-chunk-22-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n## 테마\n\n`ggplot2` 패키지는 다양한 complete 테마를 제공하고 있으며 `theme_*()` 함수를 이용해 설정 가능하다. [여기](https://ggplot2.tidyverse.org/reference/ggtheme.html)에서 확인한 후 마음에 드는 테마로 설정해보자.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = iris, aes(x = Petal.Length, y = Petal.Width, color = Species)) +\n    geom_point() +\n    theme_minimal()\n```\n\n::: {.cell-output-display}\n![](LAB_0_Data_Visualization_files/figure-html/unnamed-chunk-23-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n`theme()` 함수를 사용하여 요소별로 하나씩 수정할 수도 있다. 수정 가능한 요소는 [여기](https://ggplot2.tidyverse.org/reference/theme.html)를 확인하라. 아래는 범례의 배열 방식과 위치를 수정한 것이다.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = iris, aes(x = Petal.Length, y = Petal.Width, color = Species)) +\n    geom_point() +\n    theme_minimal() +\n    theme(\n        legend.direction = \"horizontal\",\n        legend.position = \"bottom\"\n    )\n```\n\n::: {.cell-output-display}\n![](LAB_0_Data_Visualization_files/figure-html/unnamed-chunk-24-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n# 세부 설정\n\n## 라벨\n\n`labs()` 함수를 이용하면 그래프에 다양한 종류의 라벨을 설정할 수 있다.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = iris, aes(x = Petal.Length, y = Petal.Width, color = Species)) +\n    geom_point() +\n    labs(\n        title = \"Relationship Between Petal Length and Width\", # 그래프 제목\n        subtitle = \"Visualizing Morphological Differences Among Iris Setosa, Versicolor, and Virginica\", # 부제\n        x = \"Petal Length (cm)\", # x축 제목\n        y = \"Petal Width (cm)\", # y축 제목\n        color = \"Species\", # 범례 제목\n        caption = \"Source: Fisher's Iris Dataset (1936)\" # 주석\n    )\n```\n\n::: {.cell-output-display}\n![](LAB_0_Data_Visualization_files/figure-html/unnamed-chunk-25-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n## 그래프 저장\n\n두 가지 방식이 있다. **첫 번째 방식**은 Output 창의 Plots 탭에 있는 Export 버튼은 이용하는 것이다. 다양한 그래픽 포멧 뿐만 아니라 pdf 형식으로도 저장할 수 있다. 저장 경로와 저장명, 그래프의 폭과 너비를 설정 후 `save` 버튼을 누르면 이미지가 저장된다.\n\n![](images/clipboard-196208079.png)\n\n**두 번째 방식**은 `ggplot2` 패키지의 `ggsave()` 함수를 이용하는 것이다. 결과물의 가로-세로 비, 해상도 등을 종합적으로 고려하여 최적의 세팅값을 찾아야 한다. 디바이스에 따라 동일한 세팅값이 다른 결과를 산출하기도 한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_plot <- ggplot(data = iris, aes(x = Petal.Length, y = Petal.Width, color = Species)) +\n    geom_point() +\n    labs(\n        title = \"Relationship Between Petal Length and Width\", # 그래프 제목\n        subtitle = \"Visualizing Morphological Differences Among Iris Setosa, Versicolor, and Virginica\", # 부제\n        x = \"Petal Length (cm)\", # x축 제목\n        y = \"Petal Width (cm)\", # y축 제목\n        color = \"Species\", # 범례 제목\n    ) +\n    theme_minimal() \n\nggsave(filename = \"my_plot.png\", plot = my_plot, width = 8, height = 6, dpi = 600)\n```\n:::\n\n\n![](my_plot.png)\n",
    "supporting": [
      "LAB_0_Data_Visualization_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}